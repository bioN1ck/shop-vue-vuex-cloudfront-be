import { DynamoDBClient } from '@aws-sdk/client-dynamodb';
import { DynamoDBDocumentClient, TransactWriteCommand } from '@aws-sdk/lib-dynamodb';
import { v4 as uuid } from 'uuid';

const PRODUCTS_TABLE_NAME = 'products-second';
const STOCKS_TABLE_NAME = 'stocks-second';

const dynamoDBClient = new DynamoDBClient({ region: 'eu-west-1' });
const documentClient = DynamoDBDocumentClient.from(dynamoDBClient);

const generateProduct = async () => {
    const productId = uuid();
    const productItem = {
        id: productId,
        title: `Autogenerated title ${(Math.random() * 100).toFixed(0)}`,
        description: 'Some autogenerated description',
        price: +(Math.random() * 100).toFixed(2),
    };
    const stockItem = {
        productId,
        count: +(Math.random() * 1000).toFixed(0),
    };
    const command = new TransactWriteCommand({
        TransactItems: [
            {
                Put: {
                    TableName: PRODUCTS_TABLE_NAME,
                    Item: productItem,
                },
            },
            {
                Put: {
                    TableName: STOCKS_TABLE_NAME,
                    Item: stockItem,
                },
            },
        ],
    });

    await documentClient.send(command);
}

// const delay = (ms: number) =>
//     new Promise(resolve =>
//         setTimeout(() => resolve(null), ms));


generateProduct()
    .then(() => console.log('Product successfully created'))
    .catch((e) => console.error(e));
